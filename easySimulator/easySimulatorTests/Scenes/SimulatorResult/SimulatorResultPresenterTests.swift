//
//  SimulatorResultPresenterTests.swift
//  easySimulator
//
//  Created by Tiago Chaves on 26/08/2018.
//  Copyright (c) 2018 easynvest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import easySimulator
import XCTest

class SimulatorResultPresenterTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: SimulatorResultPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupSimulatorResultPresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSimulatorResultPresenter()
    {
        sut = SimulatorResultPresenter()
    }
    
    // MARK: Test doubles
    
    class SimulatorResultDisplayLogicSpy: SimulatorResultDisplayLogic
    {
        var displaySimulationResultCalled = false
        
        func displaySimulationResult(viewModel: SimulatorResult.GetSimulationResult.ViewModel) {
            displaySimulationResultCalled = true
        }
    }
    
    // MARK: Tests
   
    func testPresentShouldFormatUsingGetDisplaySimulationResult() {
        class SimulatorResultPresenterSpy:SimulatorResultPresenter {
            
            var getDisplayCalled = false
            override func getDisplaySimulationResult(ofSimulationResult simulationResult: SimulationResult, completionHandler: @escaping ((DisplaySimulationResult) -> Void)) {
                getDisplayCalled = true
            }
        }
    
        let response = SimulatorResult.GetSimulationResult.Response(simulationResult: Seeds.SimulationResults.simulationResult)

        let newSut = SimulatorResultPresenterSpy()
        newSut.presentSimulationResult(response: response)
        
        XCTAssertTrue(newSut.getDisplayCalled)
    }
    
    func testPresentSimulationResultShouldFormatResultInString() {
        
        let expectedGrossAmount = "R$60.528,20"
        let expectedTaxesAmount = "R$4.230,78"
        let expectedNetAmount = "R$56.297,42"
        let expectedGrossAmountProfit = "R$28.205,20"
        let expectedAnnualGrossRateProfit = "87.26%"
        let expectedMonthlyGrossRateProfit = "0.76%"
        let expectedTaxesRate = "15.00%"
        let expectedRateProfit = "9.55%"
        let expectedInvestedAmount = "R$32.323,00"
        let expectedMaturityTotalDays = "1981"
        let expectedMaturityDate = "03/03/2023"
        let expectedRate = "123%"
        
        let expect = expectation(description: "Wait for result format")
        
        sut.getDisplaySimulationResult(ofSimulationResult: Seeds.SimulationResults.simulationResult) { (result) in
            
            XCTAssertEqual(expectedGrossAmount, result.grossAmount, "gross amount should be format to string - \(expectedGrossAmount)")
            XCTAssertEqual(expectedTaxesAmount, result.taxesAmount, "taxes amount should be format to string - \(expectedTaxesAmount)")
            XCTAssertEqual(expectedNetAmount, result.netAmount, "net amount should be format to string - \(expectedNetAmount)")
            XCTAssertEqual(expectedGrossAmountProfit, result.grossAmountProfit, "gross amount profit should be format to string - \(expectedGrossAmountProfit)")
            XCTAssertEqual(expectedAnnualGrossRateProfit, result.annualGrossRateProfit, "annual gross rate profit should be format to string - \(expectedAnnualGrossRateProfit)")
            XCTAssertEqual(expectedMonthlyGrossRateProfit, result.monthlyGrossRateProfit, "monthly gross rate profit should be format to string - \(expectedMonthlyGrossRateProfit)")
            XCTAssertEqual(expectedTaxesRate, result.taxesRate, "taxes rate should be format to string - \(expectedTaxesRate)")
            XCTAssertEqual(expectedRateProfit, result.rateProfit, "rate profit should be format to string - \(expectedRateProfit)")
            XCTAssertEqual(expectedInvestedAmount, result.investedAmount, "invested amount should be format to string - \(expectedInvestedAmount)")
            XCTAssertEqual(expectedMaturityTotalDays, result.maturityTotalDays, "maturity total days should be format to string - \(expectedMaturityTotalDays)")
            XCTAssertEqual(expectedMaturityDate, result.maturityDate, "maturity date should be format to string - \(expectedMaturityDate)")
            XCTAssertEqual(expectedRate, result.rate, "rate should be format to string - \(expectedRate)")
            expect.fulfill()
        }
        
        waitForExpectations(timeout: 2.0)
    }
}
