//
//  SimulatorInputInteractorTests.swift
//  easySimulator
//
//  Created by Tiago Chaves on 26/08/2018.
//  Copyright (c) 2018 easynvest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import easySimulator
import XCTest

//protocol SimulatorInputBusinessLogic
//{
//    func simulate(request: SimulatorInput.Simulation.Request)
//    func formatMaturityDate(request: SimulatorInput.FormatMaturityDate.Request)
//    func formatNumericField(request: SimulatorInput.FormatNumericField.Request)
//}

class SimulatorInputInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: SimulatorInputInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupSimulatorInputInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSimulatorInputInteractor()
    {
        sut = SimulatorInputInteractor()
    }
    
    // MARK: Test doubles
    
    class SimulatorInputPresentationLogicSpy: SimulatorInputPresentationLogic
    {
        var presentSimulationCalled = false
        var presentFormatedMaturityDateCalled = false
        var presentFormatedNumericFieldCalled = false
        
        func presentSimulationResult(response: SimulatorInput.Simulation.Response) {
            presentSimulationCalled = true
        }
        
        func presentFormatedMaturityDate(response: SimulatorInput.FormatMaturityDate.Response) {
            presentFormatedMaturityDateCalled = true
        }
        
        func presentFormatedNumericField(response: SimulatorInput.FormatNumericField.Response) {
            presentFormatedNumericFieldCalled = true
        }
    }
    
    class SimulatorInputWorkerSpy:SimulatorInputWorker {
    
        var workerCalled = false
        override func getSimulationResult(withInvestedAmount investedAmount: Double, rate: Int, andMaturityDate maturityDate: Date, completionHandler: @escaping (SimulationResult?, Error?) -> Void) {
            workerCalled = true
            completionHandler(nil,nil)
        }
    }
    
    // MARK: Tests
    
    func testSimulateShouldAskSimulatorInputWorkerToSimulateAndPresenterToFormatResult()
    {
        // Given
        let presenterSpy = SimulatorInputPresentationLogicSpy()
        sut.presenter = presenterSpy
        let workerSpy = SimulatorInputWorkerSpy(SimulatorNetworkWorker())
        sut.worker = workerSpy
        let request = SimulatorInput.Simulation.Request(investedAmount: "R$123,00", rate: "123", maturityDate: Date())
        
        // When
        sut.simulate(request: request)
        
        // Then
        XCTAssertTrue(workerSpy.workerCalled, "simulate() should ask SimulationInputWorker to simulate")
        XCTAssertTrue(presenterSpy.presentSimulationCalled, "simulate(request:) should ask the presenter to format the result")
    }
    
    func testFormatMaturityDateShouldAskPresenterToFormat() {
        
        let presenterSpy = SimulatorInputPresentationLogicSpy()
        sut.presenter = presenterSpy
        
        let request = SimulatorInput.FormatMaturityDate.Request(maturityDate: Date())
        sut.formatMaturityDate(request:request)
        
        XCTAssertTrue(presenterSpy.presentFormatedMaturityDateCalled, "formatMaturityDate() should ask the presenter to format the date")
    }
    
    func testFormatNumericFieldShouldAskPresenterToFormat() {
        
        let presenterSpy = SimulatorInputPresentationLogicSpy()
        sut.presenter = presenterSpy
        
        let request = SimulatorInput.FormatNumericField.Request(value: "", fieldType: .amount(100))
        sut.formatNumericField(request: request)
        
        XCTAssertTrue(presenterSpy.presentFormatedNumericFieldCalled, "formatNumericField() should ask the presenter to format the numeric field")
    }
}
