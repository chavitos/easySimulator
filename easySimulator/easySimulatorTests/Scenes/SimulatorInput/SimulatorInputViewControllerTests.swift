//
//  SimulatorInputViewControllerTests.swift
//  easySimulator
//
//  Created by Tiago Chaves on 26/08/2018.
//  Copyright (c) 2018 easynvest. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import easySimulator
import XCTest

class SimulatorInputViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: SimulatorInputViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupSimulatorInputViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSimulatorInputViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "SimulatorInputViewController") as! SimulatorInputViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class SimulatorInputBusinessLogicSpy: SimulatorInputBusinessLogic
    {
        var simulateCalled = false
        func simulate(request: SimulatorInput.Simulation.Request) {
            simulateCalled = true
        }
        
        var formatDateCalled = false
        func formatMaturityDate(request: SimulatorInput.FormatMaturityDate.Request) {
            formatDateCalled  = true
        }
        
        var formatNumericCalled = false
        func formatNumericField(request: SimulatorInput.FormatNumericField.Request) {
            formatNumericCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldSimulateWhenSimulateButtonIsTapped()
    {
        // Given
        let interactorSpy = SimulatorInputBusinessLogicSpy()
        sut.interactor = interactorSpy
        
        // When
        loadView()
        sut.requestSimulation(self)
        
        // Then
        XCTAssertTrue(interactorSpy.simulateCalled, "requestSimulation() should ask the interactor to simulate")
    }
    
    func testFormatMaturityDateShouldAskInteractorForFormat() {
        
        let interactorSpy = SimulatorInputBusinessLogicSpy()
        sut.interactor = interactorSpy
        
        loadView()
        sut.maturityDateValueChanged(self)
        
        XCTAssertTrue(interactorSpy.formatDateCalled, "maturityDateValueChanged() should ask the interactor to format")
    }
    
    func testFormatNumericFieldAmountShouldAskInteractorForFormat() {
        
        let interactorSpy = SimulatorInputBusinessLogicSpy()
        sut.interactor = interactorSpy
        
        loadView()
        sut.textFieldDidChange(sut.investedAmountTextField)
        
        XCTAssertTrue(interactorSpy.formatNumericCalled, "textFieldDidChange(investedAmountTextField) should ask the interactor to format")
    }
    
    func testFormatNumericFieldRateShouldAskInteractorForFormat() {
        
        let interactorSpy = SimulatorInputBusinessLogicSpy()
        sut.interactor = interactorSpy
        
        loadView()
        sut.textFieldDidChange(sut.rateTextField)
        
        XCTAssertTrue(interactorSpy.formatNumericCalled, "textFieldDidChange(rateTextField) should ask the interactor to format")
    }
    
    func testDisplayFormattedMaturityDateShouldDisplayFormattedDateStringInTextField()
    {
        // Given
        let viewModel = SimulatorInput.FormatMaturityDate.ViewModel(formatedMaturityDate: "22/12/2022")
        let expectDisplayFormattedMaturityDate = expectation(description: "maturity")
        
        // When
        loadView()
        sut.displayFormattedMaturityDate(viewModel: viewModel)
    
        let observe = sut.maturityDateTextField.observe(\.text, options: [.new]) { (textField, value) in
            
            // Then
            XCTAssertEqual(viewModel.formatedMaturityDate, self.sut.maturityDateTextField.text, "maturity date text field should display formatted maturity date string - \(viewModel.formatedMaturityDate)")
            expectDisplayFormattedMaturityDate.fulfill()
        }
        
        waitForExpectations(timeout: 5.0)
    }
    
    func testDisplayFormattedNumericFieldAmountShouldDisplayFormattedNumericStringInTextField()
    {
        // Given
        let viewModel = SimulatorInput.FormatNumericField.ViewModel(formatedValue: "R$12.000.00", tag: 100)
        let expectDisplayFormattedAmount = expectation(description: "amount")
        
        // When
        loadView()
        sut.displayFormattedNumericField(viewModel: viewModel)
        
        let observe = sut.investedAmountTextField.observe(\.text, options: [.new]) { (textField, value) in
           
            // Then
            XCTAssertEqual(viewModel.formatedValue, self.sut.investedAmountTextField.text!, "invested amount text field should display formatted amount string - \(viewModel.formatedValue)")
            expectDisplayFormattedAmount.fulfill()
        }
        
        waitForExpectations(timeout: 5.0)
    }
    
    func testDisplayFormattedNumericFieldRateShouldDisplayFormattedNumericStringInTextField()
    {
        // Given
        let viewModel = SimulatorInput.FormatNumericField.ViewModel(formatedValue: "123", tag: 101)
        let expectDisplayFormattedRate = expectation(description: "rate")
        
        // When
        loadView()
        sut.displayFormattedNumericField(viewModel: viewModel)
        
        let observe = sut.rateTextField.observe(\.text, options: [.new]) { (textField, value) in
            
            // Then
            XCTAssertEqual(viewModel.formatedValue, self.sut.rateTextField.text, "rate text field should display formatted rate string - \(viewModel.formatedValue)")
            expectDisplayFormattedRate.fulfill()
        }
        
        waitForExpectations(timeout: 5.0)
    }
}
